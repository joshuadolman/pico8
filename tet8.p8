pico-8 cartridge // http://www.pico-8.com
version 16
__lua__
grid_w=10
grid_h=20
grid_ofx=0
grid_ofy=0
grid_cellsize=5
grid={}

tet={
	t=7,
	x=1,
	y=1,
	r=0,
}

tet_def={
	[0]={
		{ 0,-1,  0, 1,  0, 2},
		{ 1, 0,  0, 1,  1, 1},
		{ 1, 0,  0, 1, -1, 1},
		{-1, 0,  0, 1,  1, 1},
		{ 0,-1,  0, 1,  1, 1},
		{ 0,-1,  0, 1, -1, 1},
		{ 0,-1,  -1,0,  1, 0},
	},
	[1]={
		{ 1, 0, -1, 0, -2, 0},
		{ 1, 0,  0, 1,  1, 1},
		{ 0, 1, -1, 0, -1,-1},
		{ 0,-1, -1, 0, -1, 1},
		{-1, 1, -1, 0,  1, 0},
		{-1, 0, -1,-1,  1, 0},
		{ 0,-1,  1, 0,  0, 1},
	},
	[2]={
		{ 0,1,  0, -1,  0,-2},
		{ 1, 0,  0, 1,  1, 1},
		{-1, 0,  0,-1,  1,-1},
		{ 1, 0,  0,-1, -1,-1},
		{ 0,-1, -1,-1,  0, 1},
		{ 1,-1,  0,-1,  0, 1},
		{ 0, 1, -1, 0,  1, 0},
	},
	[3]={
		{-1, 0,  1, 0,  2, 0},
		{ 1, 0,  0, 1,  1, 1},
		{ 0,-1,  1, 0,  1, 1},
		{ 1,-1,  1, 0,  0, 1},
		{ 1, 0,  1,-1, -1, 0},
		{ 1, 0,  1, 1, -1, 0},
		{-1, 0,  0,-1,  0, 1},
	},
}

function _init()
	printh("starting tetris")
	init_grid()
	spawn_tet()
	tet.y=5
	tet.t=7
end

function init_grid()
	for _x=1,grid_w do
		grid[_x]={}
		for _y=1,grid_h do
			grid[_x][_y]=0
		end
	end
	grid_ofx=63-((grid_w/2)*grid_cellsize)
	grid_ofy=63-((grid_h/2)*grid_cellsize)+1
end

function spawn_tet()
	tet.t=flr(rnd(7))+1
	tet.r=0
	tet.x=flr(grid_w/2)
	if tet.t==1 then
		tet.y=2
	elseif tet.t==2 then
		tet.y=1
	elseif tet.t==3 then
		tet.x+=1
		tet.y=1
	elseif tet.t==4 then
		tet.y=1
	elseif tet.t==5 then
		tet.y=2
	elseif tet.t==6 then
		tet.y=2
	elseif tet.t==7 then
		tet.x+=1
		tet.y=2
	end
end

function _update60()
	if btnp(4) then
		tet.r+=1
		if tet.r>=4 then tet.r=0 end
	end
	if btnp(5) then
		tet.t+=1
		if tet.t>=8 then tet.t=1 end
	end
end

function _draw()
	cls(0)
	draw_grid()
	tet_draw()
	--draw_cur_tet()
	--debug_print_grid()
	--debug_print_rowstokill()
	print("tetris",52,4,2)
	print("tetris",52,3,7)
	--print("tet.t: "..tet.t,1,1,7)
	--print("tet.r: "..tet.r,1,7,7)
end

function draw_grid()
	
	--[[fillp(0b0101101001011010)
	color(15)
	rectfill(grid_ofx,grid_ofy,grid_ofx+(grid_w*grid_cellsize),grid_ofy+(grid_h*grid_cellsize),0x21)
	fillp(0b1010010110100101)
	rectfill(grid_ofx+5,grid_ofy+5,grid_ofx+(grid_w*grid_cellsize),grid_ofy+(grid_h*grid_cellsize),0x21)
	fillp(0b0101101001011010)
	rectfill(grid_ofx+10,grid_ofy+10,grid_ofx+(grid_w*grid_cellsize),grid_ofy+(grid_h*grid_cellsize),0x21)
	fillp()
	]]
	rectfill(grid_ofx,grid_ofy,grid_ofx+(grid_w*grid_cellsize),grid_ofy+(grid_h*grid_cellsize),5)
	rect(grid_ofx-2,grid_ofy-2,grid_ofx+(grid_w*grid_cellsize)+2,grid_ofy+(grid_h*grid_cellsize)+2,5)
	for _x=1,grid_w do
		for _y=1,grid_h do
			_x1=((_x-1)*grid_cellsize)+grid_ofx
			_y1=((_y-1)*grid_cellsize)+grid_ofy
			rect(_x1,_y1,_x1+grid_cellsize,_y1+grid_cellsize,0)
			if grid[_x][_y]!=0 then
				spr(grid[_x][_y]+16,((_x-1)*grid_cellsize)+grid_ofx+1,((_y-1)*grid_cellsize)+grid_ofy+1)
				--rectfill(_x1+1,_y1+1,_x1+grid_cellsize-2,_y1+grid_cellsize-2)
			end
		end
	end
	
end

function tet_draw()
	spr(tet.t,gridpos_to_pixelpos(tet.x,tet.y))
	for _i=1,3 do
		spr(tet.t,gridpos_to_pixelpos(get_tetdef_gridpos(_i)))
	end
end

function gridpos_to_pixelpos(_x,_y)
	local _px,_py
	_px=(_x-1)*grid_cellsize+grid_ofx+1
	_py=(_y-1)*grid_cellsize+grid_ofy+1
	return _px,_py
end

function get_tetdef_gridpos(_i)
	local _gx,_gy=tet.x+tet_def[tet.r][tet.t][(_i*2)-1],tet.y+tet_def[tet.r][tet.t][(_i*2)]
	return _gx,_gy
end

__gfx__
00000000777c0000777a0000777b00009998000066650000aaa90000eee200000000000000000000000000000000000000000000000000000000000000000000
000000007cc100007aa900007bb300009882000065510000a9940000e22100000000000000000000000000000000000000000000000000000000000000000000
007007007cc100007aa900007bb300009882000065510000a9940000e22100000000000000000000000000000000000000000000000000000000000000000000
00077000c1110000a9990000b3330000822200005111000094440000211100000000000000000000000000000000000000000000000000000000000000000000
00077000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00700700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000cccc0000aaaa0000bbbb0000888800001111000099990000222200000000000000000000000000000000000000000000000000000000000000000000
00000000cccc0000aaaa0000bbbb0000888800001111000099990000222200000000000000000000000000000000000000000000000000000000000000000000
00000000cccc0000aaaa0000bbbb0000888800001111000099990000222200000000000000000000000000000000000000000000000000000000000000000000
00000000cccc0000aaaa0000bbbb0000888800001111000099990000222200000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
77760000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000070007007
766500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b000b00b
76650000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000077077007
65550000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b707b00
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000077000770
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000370000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000770000
